# -*- coding: utf-8 -*-
"""Assignment3_700745497.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JQzkiK9xkC66fFhoHW4RKxMeZvGNcgIf
"""

import numpy as np
a=np.random.randint(20, size=15)
#original array mentioned 
print(a.shape)       
#reshaping the array        
b=a.reshape((3, 5)) 
#shape of array
print(b.shape)                
print(b)
#replacing the max values of each row with 0
max_ind = np.argmax(b, axis=1)
row_ind = np.arange(b.shape[0])
multi_ind = np.array([row_ind, max_ind])
linear_ind = np.ravel_multi_index(multi_ind, b.shape)
b.reshape((-1))[linear_ind] = 0
print(b)

import numpy as np
x = np.array([[2,4,6], [6,8,10],[5,8,3],[7,9,5]], np.int32)
#shape
print(x.shape)
#type
print(type(x))	
#datatype
print(x.dtype)

import numpy as np
m = np.array([[3, -2],
			        [1, 0]])

#finding eigenvalues and eigenvectors
evalues, evectors = np.linalg.eig(m)

#eigen values
print("Eigen values ",evalues)

#eigen vectors
print("Eigen Vectors ",evectors)

import numpy as np
m = np.array([[0,1,2],
			        [3,4,5]])
#sum of diagonal elements
result =  np.trace(m)
print(result)

import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
#Reshape 3x2
y = np.reshape(x,(3,2))
print(y)
#Reshape 2x3
z = np.reshape(x,(2,3))
print(z)

import numpy as np
from matplotlib import pyplot as plt
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)
#chart values
Popularity = [ 22.2, 17.6, 8.8, 8, 7.7, 6.7]
Programming_languages = ['Java', 'Python', 'PHP', 'JavaScript', 'C#', 'C++']
explode = [0.1, 0, 0, 0, 0, 0]
fig, ax = plt.subplots(figsize =(7, 5))
wedges, texts, autotexts = ax.pie(Popularity,
                                  autopct = lambda pct: func(pct, Popularity),
                                  explode = explode,
                                  labels = Programming_languages,
                                  shadow = True,
                                  startangle = 90,
                                  wedgeprops = {'edgecolor': 'black'},
                                  textprops = dict(color ="Black")) 
plt.setp(autotexts, size = 8, weight ="bold")
plt.title('popularity of programming Languages')
plt.tight_layout()
plt.show()

